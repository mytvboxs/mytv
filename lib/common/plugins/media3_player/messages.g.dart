// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class TextureMessage {
  TextureMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static TextureMessage decode(Object result) {
    result as List<Object?>;
    return TextureMessage(
      textureId: result[0]! as int,
    );
  }
}

class PrepareMessage {
  PrepareMessage({
    required this.textureId,
    required this.dataSource,
    this.contentType,
    this.playWhenReady,
  });

  int textureId;

  String dataSource;

  int? contentType;

  bool? playWhenReady;

  Object encode() {
    return <Object?>[
      textureId,
      dataSource,
      contentType,
      playWhenReady,
    ];
  }

  static PrepareMessage decode(Object result) {
    result as List<Object?>;
    return PrepareMessage(
      textureId: result[0]! as int,
      dataSource: result[1]! as String,
      contentType: result[2] as int?,
      playWhenReady: result[3] as bool?,
    );
  }
}

class PlayMessage {
  PlayMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static PlayMessage decode(Object result) {
    result as List<Object?>;
    return PlayMessage(
      textureId: result[0]! as int,
    );
  }
}

class PauseMessage {
  PauseMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static PauseMessage decode(Object result) {
    result as List<Object?>;
    return PauseMessage(
      textureId: result[0]! as int,
    );
  }
}

class StopMessage {
  StopMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static StopMessage decode(Object result) {
    result as List<Object?>;
    return StopMessage(
      textureId: result[0]! as int,
    );
  }
}

class DisposeMessage {
  DisposeMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static DisposeMessage decode(Object result) {
    result as List<Object?>;
    return DisposeMessage(
      textureId: result[0]! as int,
    );
  }
}

class _AndroidMedia3PlayerApiCodec extends StandardMessageCodec {
  const _AndroidMedia3PlayerApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DisposeMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PauseMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PlayMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PrepareMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is StopMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is TextureMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return DisposeMessage.decode(readValue(buffer)!);
      case 129: 
        return PauseMessage.decode(readValue(buffer)!);
      case 130: 
        return PlayMessage.decode(readValue(buffer)!);
      case 131: 
        return PrepareMessage.decode(readValue(buffer)!);
      case 132: 
        return StopMessage.decode(readValue(buffer)!);
      case 133: 
        return TextureMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AndroidMedia3PlayerApi {
  /// Constructor for [AndroidMedia3PlayerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AndroidMedia3PlayerApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _AndroidMedia3PlayerApiCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initialize() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.my_tv.AndroidMedia3PlayerApi.initialize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<TextureMessage> create() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.my_tv.AndroidMedia3PlayerApi.create$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as TextureMessage?)!;
    }
  }

  Future<void> prepare(PrepareMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.my_tv.AndroidMedia3PlayerApi.prepare$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> play(PlayMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.my_tv.AndroidMedia3PlayerApi.play$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause(PauseMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.my_tv.AndroidMedia3PlayerApi.pause$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stop(StopMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.my_tv.AndroidMedia3PlayerApi.stop$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> dispose(DisposeMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.my_tv.AndroidMedia3PlayerApi.dispose$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
